### DML ### THIS IS UNDER CONSTRUCTION!!!
 
# Keyspace Name
keyspace: test_keyspace
 
# The CQL for creating a keyspace (optional if it already exists)
keyspace_definition: |
  CREATE KEYSPACE test_keyspace WITH replication = {'class': 'NetworkTopologyStrategy', 'aiven': 3};
 
# Table name
table: reviews_by_day
 
# The CQL for creating a table you wish to stress (optional if it already exists)
table_definition: 
  create table reviews_by_day (
  userid text,
  day int,
  productid text,
  reviewid uuid,
  profilename text,
  helpfulness text,
  score text,
  summary text,
  review text,
  time timestamp,
  primary key (userid, productid, time, reviewid))
### Column Distribution Specifications ###
 
columnspec:
  - name: userid
    size: fixed(80)
    population: gaussian(100..500)
 
  - name: day
    size: gaussian(4..10)
    population: gaussian(100..500)
 
  - name: productid
    size: gaussian(100..500)
    population: gaussian(100..500)
 
  - name: reviewid
    size: gaussian(32..500)
    population: gaussian(100..500)
 
  - name: profilename
    size: gaussian(100..500)
    population: gaussian(100..500)
 
  - name: helpfulness
    size: gaussian(100..500)
    population: gaussian(100..500)
 
  - name: score
    size: gaussian(100..500)
    population: gaussian(100..500)
 
  - name: summary
    size: gaussian(10000..500000)
    population: gaussian(100..500)
 
  - name: review
    size: gaussian(1000..500000)
    population: gaussian(1000..5000)
 
  - name: time
    size: gaussian(100..500)
    population: gaussian(100..500)
 

   
### Batch Ratio Distribution Specifications ###
 
insert:
  partitions: fixed(1)            # Our partition key is the domain so only insert one per batch
 
  select:  fixed(1)/100000        # We have 1000 posts per domain so 1/1000 will allow 1 post per batch  
 
  batchtype: UNLOGGED             # Unlogged batches
 
 
#
# A list of queries you wish to run against the schema
#
queries:
   likelyquery0: 
    cql: SELECT * FROM reviews_by_day WHERE userid = ?
    fields: samerow
   likelyquery1: 
    cql: SELECT * FROM reviews_by_day WHERE userid = ? AND productid = ?
    fields: samerow
   likelyquery2: 
    cql: SELECT * FROM reviews_by_day WHERE userid = ? AND productid = ? AND time = ?
    fields: samerow
   likelyquery3: 
    cql: SELECT * FROM reviews_by_day WHERE userid = ? AND productid = ? AND time = ? AND reviewid = ?
    fields: samerow
